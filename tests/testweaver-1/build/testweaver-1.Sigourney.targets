<!-- Once again, this file MUST NOT be called "testweaver-1.targets". If it was,
NuGet would import it at an undefined place in our project. By registering it as seen in
testweaver-1.props, Sigourney will make sure this file is imported where it should be. -->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- We import the task as usual. -->
  <UsingTask AssemblyFile="$(TestWeaver1Assembly)" TaskName="TestWeaver1" />

  <!-- This target sets the input and output for the actual weaving target
  to support incremental building. It should have the weaving target in its
  BeforeTargets. It should be viewed as more of a boilerplate. You can learn
  how it works by taking a look at the GetNextSentinel.cs file in Sigourney's sources. -->
  <Target Name="PrepareTestWeaver1" BeforeTargets="RunTestWeaver1">
    <!-- The invocation of the following task should be viewed as more of a boilerplate
    and be copied almost verbatim, apart from the value of the WeaverName parameter which
    has to be unique among the weavers of a project. You can learn how it works by taking a
    look at the GetNextSentinel.cs file in Sigourney's sources. -->
    <GetNextSentinel
      IntermediateDirectory="$(IntermediateDirectory)"
      WeaverName="TestWeaver1"
      AssemblyPath="@(IntermediateAssembly)"
      InputSentinel="$(SigourneyInputSentinel)"
      OutputSentinel="$(SigourneyOutputSentinel)">
      <Output TaskParameter="InputSentinel" PropertyName="SigourneyInputSentinel" />
      <Output TaskParameter="OutputSentinel" PropertyName="SigourneyOutputSentinel" />
    </GetNextSentinel>
  </Target>

  <!-- And now the weaver itself. Its inputs and outputs were set by the target above. -->
  <Target Name="RunTestWeaver1" Inputs="$(SigourneyInputSentinel)" Outputs="$(SigourneyOutputSentinel)">
    <!-- Sigourney's MSBuildWeaver class defines some properties, of which only
    the AssemblyPath is required. WeaverName must be the same with the WeaverName
    passed in the GetNextSentinel task above. The other two properties are boilerplate;
    OutputSentinel is used to create the target's output file and Configuration is a
    blackbox that allows passing additional properties (to support features like
    strong-naming) in a backwards-compatible way. -->
    <TestWeaver1
      AssemblyPath="@(IntermediateAssembly)"
      WeaverName="TestWeaver1"
      OutputSentinel="$(SigourneyOutputSentinel)"
      Configuration="@(SigourneyConfiguration)" />
  </Target>
</Project>
